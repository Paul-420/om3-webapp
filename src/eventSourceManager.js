
// Fonction pour cr√©er l'EventSource
export const createEventSource = (url, token) => {

    if (!token) {
        console.error("‚ùå Token manquant pour l'EventSource !");
        return null;
    }

    console.log("üîó Connexion √† EventSource avec token", token);

    const eventSource = new EventSource(url);

    eventSource.onopen = () => {
        console.log("‚úÖ Connexion SSE √©tablie !");
    };

    eventSource.onerror = (error) => {
        console.error("üö® Erreur EventSource :", error);
        eventSource.close();

        // Reconnexion apr√®s 5 secondes
        setTimeout(() => {
            console.log("üîÑ Tentative de reconnexion √† EventSource...");
            createEventSource(url, token);
        }, 5000);
    };

    return eventSource;
};

// Fonction pour fermer l'EventSource
export const closeEventSource = (eventSource) => {
    if (eventSource) {
        console.log("üõë Fermeture de l'EventSource");
        eventSource.close();
    }
};

// Hook personnalis√© avec useEffect pour g√©rer l'EventSource
//export const useEventSource = (url, token) => {
//  useEffect(() => {
//    if (!token) {
//      console.error("‚ùå Aucun token fourni pour l'EventSource !");
//      return;
//    }
//
//    // Cr√©ation de l'EventSource avec le token
//    const eventSource = createEventSource(url, token);
//
//    // Nettoyage lors du d√©montage du composant ou changement de token
//    return () => {
//      closeEventSource(eventSource);
//    };
//  }, [url, token]); // Red√©marre l'EventSource si l'URL ou le token change
//};
//